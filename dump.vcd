$date
	Thu Dec 10 11:08:19 2015
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module shift $end
$var wire 6 ! in [5:0] $end
$var wire 6 " out [5:0] $end
$var reg 8 # temp [7:0] $end
$upscope $end
$scope module topmodule_t $end
$var wire 1 $ zero $end
$var wire 5 % wrRegis [4:0] $end
$var wire 32 & shiftBranch [31:0] $end
$var wire 1 ' selBranch $end
$var wire 1 ( regwrite $end
$var wire 1 ) regdst $end
$var wire 32 * outmux [31:0] $end
$var wire 32 + outALU [31:0] $end
$var wire 1 , memwrite $end
$var wire 1 - memtoreg $end
$var wire 1 . memread $end
$var wire 32 / jumpAddress [31:0] $end
$var wire 1 0 jump $end
$var wire 1 1 jal $end
$var wire 32 2 instruction [31:0] $end
$var wire 32 3 dataToReg [31:0] $end
$var wire 32 4 dataOut [31:0] $end
$var wire 32 5 data2 [31:0] $end
$var wire 32 6 data1 [31:0] $end
$var wire 32 7 bitOutSignExtened [31:0] $end
$var wire 1 8 alusrc $end
$var wire 2 9 aluop [1:0] $end
$var wire 32 : address [31:0] $end
$var wire 32 ; addAddress [31:0] $end
$var wire 32 < PC4 [31:0] $end
$var wire 4 = ALUCon [3:0] $end
$var reg 1 > clk $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0>
b10 =
b10100100 <
b10101100 ;
b10100000 :
b0 9
18
b10 7
b0 6
b10 5
b0 4
b10 3
b100000000010000000000000000010 2
01
00
b1000000000000000001000 /
0.
0-
0,
b10 +
b10 *
0)
1(
0'
b1000 &
b1000 %
0$
bz00 #
bz00 "
bz !
$end
#5
b1001 %
b10101000 <
b1001000000000000001000 /
b100000000010010000000000000010 2
b10110000 ;
b10100100 :
1>
#10
0>
#15
1'
1$
b110 =
b0 3
b0 %
b0 +
0(
1)
08
b1 9
b10110100 <
b10 6
b10001000010010000000000000010 2
b10110100 ;
b10101000 :
1>
#20
0>
#25
0$
b10 =
b11 3
b1101 %
0'
b11 +
18
0)
1(
b0 9
b1100 &
b11 *
b10111000 <
b1101000000000000001100 /
b11 7
b11 5
b0 6
b100000000011010000000000000011 2
b11000100 ;
b10110100 :
1>
#30
0>
#35
b10 5
b10 3
b10 +
b10 *
b1000 &
b1000 %
b10111100 <
b1000000000000000001000 /
b10 7
b100000000010000000000000000010 2
b11000100 ;
b10111000 :
1>
#40
0>
#45
b11111010011 3
b0 %
b11111010011 +
0(
1,
1)
18
b0 9
b11111010000 *
b1111101000000 &
b11000000 <
b10101000000001111101000000 /
b11111010000 7
b11 6
b10101101101010000000011111010000 2
b10000000000000 ;
b10111100 :
1>
#50
0>
#55
b10 3
b1000 %
b10 5
b10 4
1-
0)
1.
1(
0,
18
b0 9
b11000100 <
b10001101101010000000011111010000 2
b10000000000100 ;
b11000000 :
1>
#60
0>
#65
1$
b0 =
b11001000 3
b0 4
b0 +
11
10
1)
0-
0.
08
b10 9
b10100000 &
b0 *
b11111 %
b10100000 <
b10100000 /
b101000 7
b0 5
b0 6
b1100000000000000000000101000 2
b101101000 ;
b11000100 :
1>
#70
0>
#75
0$
b10 +
b10 =
b1000 %
18
b0 9
0)
01
00
b10100100 <
b1000 &
b10 *
b1000000000000000001000 /
b10 7
b10 5
b10 3
b100000000010000000000000000010 2
b10101100 ;
b10100000 :
1>
#80
0>
#85
b1001 %
b10101000 <
b1001000000000000001000 /
b100000000010010000000000000010 2
b10110000 ;
b10100100 :
1>
#90
0>
#95
1'
1$
b110 =
b0 3
b0 %
b0 +
0(
1)
08
b1 9
b10110100 <
b10 6
b10001000010010000000000000010 2
b10110100 ;
b10101000 :
1>
#100
0>
